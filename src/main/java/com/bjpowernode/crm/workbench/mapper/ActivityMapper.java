package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.bean.Activity;

import java.lang.ref.SoftReference;
import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Nov 06 20:27:40 CST 2022
     */
    int deleteByPrimaryKey(String id);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Nov 06 20:27:40 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Nov 06 20:27:40 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Nov 06 20:27:40 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Nov 06 20:27:40 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     *保存创建的市场活动
     */
    int insertActivity(Activity activity);

    //根据条件查询数据
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);
    //根据条件查询数据总数
    int selectCountOfActivityByCondition(Map<String,Object> map);
    //根据Id删除市场活动
    int deleteActivityByIds(String[] ids);
    //根据id查询市场活动
    Activity selectActivityById(String id);
    //根据id更新市场活动
    int updateActivityById(Activity activity);
    //查询所有市场活动
    List<Activity> selectAllActivity();
    //插入导入的市场活动
    int insertActivityByList(List<Activity> activityList);
    //查看市场活动明细
    Activity selectActivityForDetailById(String id);
    //根据clueId查询该线索相关联的市场活动的明细信息
    List<Activity> selectActivityForDetailByClueId(String id);
    //根据name模糊查询市场活动，并且把已经跟clueId关联过的市场活动排除
    List<Activity> selectActivityForDetailByNameClueId(Map<String,Object> map);
    //根据线索关联的市场活动id查询这些市场活动的部分信息
    List<Activity> selectActivityForDetailByIds(String[] ids);

}